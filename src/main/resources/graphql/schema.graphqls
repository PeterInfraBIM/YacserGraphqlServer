	# YACSER object types
enum YacserObjectType {
	Function
	Hamburger
	Performance
	PortRealisation
	RealisationModule
	RealisationPort
	Requirement
	SystemInterface
	SystemSlot
	Value
}

	# YACSER data model
type YacserModel {
		# Base URI of the model.
	id: ID!
		# Optional name of the model.
	name: String
		# Optional description of the model.
	description: String
}

	# YACSER object interface.
interface YacserObject {
		# URI of the object instance.
	id: ID!
		# Optional name of the object.
	name: String
		# Optional description of the object.
	description: String
		# Type of the object instance
	type: YacserObjectType!
}

	# YACSER Function instance.
type Function implements YacserObject {
		# URI of the object instance.
	id: ID!
		# Optional name of the object.
	name: String
		# Optional description of the object.
	description: String
		# Type of the object instance.
	type: YacserObjectType!
		# Owner SystemSlot.
	owner: SystemSlot
		# Related Requirements.
	requirements: [Requirement]
		# Function input.
	input: SystemInterface
		# Function output.
	output: SystemInterface
		# Assembly reference.
	assembly: Function
		# Parts references.
	parts: [Function]
}

	# YACSER Hamburger instance.
type Hamburger implements YacserObject {
		# URI of the object instance.
	id: ID!
		# Optional name of the object.
	name: String
		# Optional description of the object.
	description: String
		# Type of the object instance,
	type: YacserObjectType!
		# Functional Unit reference.
	functionalUnit: SystemSlot
		# Technical Solution reference.
	technicalSolution: RealisationModule
		# Port realisations
	ports: [PortRealisation]
		# Assembly reference.
	assembly: Hamburger
		# Parts references.
	parts: [Hamburger]
}

	# YACSER Performance instance.
type Performance implements YacserObject {
		# URI of the object instance.
	id: ID!
		# Optional name of the object.
	name: String
		# Optional description of the object.
	description: String
		# Type of the object instance
	type: YacserObjectType!
		# Owner RealisationModule
	owner: RealisationModule
		# Value
	value: Value
}

	# YACSER Port realisation instance.
type PortRealisation implements YacserObject {
		# URI of the object instance.
	id: ID!
		# Optional name of the object.
	name: String
		# Optional description of the object.
	description: String
		# Type of the object instance.
	type: YacserObjectType!
		# Owner Hamburger.
	owner: Hamburger
		# System interface reference.
	interface: SystemInterface
		# Realisation port reference.
	port: RealisationPort
		# Assembly reference.
	assembly: PortRealisation
		# Parts references.
	parts: [PortRealisation]
}

	# YACSER Realisation module instance.
type RealisationModule implements YacserObject {
		# URI of the object instance.
	id: ID!
		# Optional name of the object.
	name: String
		# Optional description of the object.
	description: String
		# Type of the object instance.
	type: YacserObjectType!
		# Specified performances.
	performances: [Performance]
		# Connection ports
	ports: [RealisationPort]
		# Hamburger references
	hamburgers: [Hamburger]
		# Assembly reference.
	assembly: RealisationModule
		# Parts references.
	parts: [RealisationModule]
}

	# YACSER Realisation port instance.
type RealisationPort implements YacserObject {
		# URI of the object instance.
	id: ID!
		# Optional name of the object.
	name: String
		# Optional description of the object.
	description: String
		# Type of the object instance.
	type: YacserObjectType!
		# Owner RealisationModule.
	owner: RealisationModule
		# Assembly reference.
	assembly: RealisationPort
		# Parts references.
	parts: [RealisationPort]
}

	# YACSER Requirement instance.
type Requirement implements YacserObject {
		# URI of the object instance.
	id: ID!
		# Optional name of the object.
	name: String
		# Optional description of the object.
	description: String
		# Type of the object instance.
	type: YacserObjectType!
		# Owner Function, SystemSlot of SystemInterface.
	owner: YacserObject
		# Minimal value.
	minValue: Value
		# Maximal value.
	maxValue: Value
}

	# YACSER System interface instance.
type SystemInterface implements YacserObject {
		# URI of the object instance.
	id: ID!
		# Optional name of the object.
	name: String
		# Optional description of the object.
	description: String
		# Type of the object instance
	type: YacserObjectType!
		# First SystemSlot.
	systemSlot0: SystemSlot
		# Second SystemSlot.
	systemSlot1: SystemSlot
		# Input to functions
	functionInputs: [Function]
		# Output from functions
	functionOutputs: [Function]
		# Assembly reference.
	assembly: SystemInterface
		# Parts references.
	parts: [SystemInterface]
}

	# YACSER System slot instance.
type SystemSlot implements YacserObject {
		# URI of the object instance.
	id: ID!
		# Optional name of the object.
	name: String
		# Optional description of the object.
	description: String
		# Type of the object instance
	type: YacserObjectType!
		# Specified functions.
	functions: [Function]
		# Related interfaces.
	interfaces: [SystemInterface]
		# Hamburger references
	hamburgers: [Hamburger]
		# Assembly reference.
	assembly: SystemSlot
		# Parts references.
	parts: [SystemSlot]
}

	# Value instance.
type Value implements YacserObject {
		# Value URI
	id: ID!
		# Optional name of the object.
	name: String
		# Optional description of the object.
	description: String
		# Type of the object instance
	type: YacserObjectType!
		# Unit string
	unit: String
		# Value float
	value: Float
}

	# All queries that are defined for this YACSER graphQL server
type Query {
		# List all loaded models.
	allModels: [YacserModel]
	
		# List all YACSER objects
	allObjects(
			# Base URI of the model.
		modelId: ID!
	): [YacserObject]
	
		# Get Function object by ID.
	function(
			# Function object ID.
		id: ID!
	): Function
	
		# Get Hamburger object by ID.
	hamburger(
			# Hamburger object ID.
		id: ID!
	): Hamburger

		# Get Performance object by ID.
	performance(
			# Performance object ID.
		id: ID!
	): Performance
	
		# Get PortRealisation object by ID.
	portRealisation(
			# PortRealisation object ID.
		id: ID!
	): PortRealisation

		# Get RealisationModule object by ID.
	realisationModule(
			# RealisationModule object ID.
		id: ID!
	): RealisationModule
	
		# Get RealisationPort object by ID.
	realisationPort(
			# RealisationPort object ID.
		id: ID!
	): RealisationPort

		# Get Requirement object by ID.
	requirement(
			# Requirement object ID.
		id: ID!
	): Requirement

		# Get SystemInterface object by ID.
	systemInterface(
			# SystemInterface object ID.
		id: ID!
	): SystemInterface
		
		# Get SystemSlot object by ID.
	systemSlot(
			# SystemSlot object ID.
		id: ID!
	): SystemSlot
	
		# Get Value object by ID.
	value(
			# Value object ID.
		id: ID!
	): Value
	
}

	# Update Function input arguments.
input UpdateFunctionInput {
		# Function ID.
	functionId: ID!
		# If present: new name.
	updateName: String
		# If present: new description.
	updateDescription: String
		# If present: add requirements.
	addRequirements: [ID]
		# If present: remove requirements.
	removeRequirements: [ID]
		# If present: new input reference.
	updateInput: ID
		# If present: new output reference.
	updateOutput: ID
		# If present: update assembly.
	updateAssembly: ID
		# If present: add parts.
	addParts: [ID]
		# If present: remove parts.
	removeParts: [ID]
}

	# Update Hamburger input arguments.
input UpdateHamburgerInput {
		# Hamburger ID.
	hamburgerId: ID!
		# If present: new name.
	updateName: String
		# If present: new description.
	updateDescription: String
		# If present: new functional unit reference.
	updateFunctionalUnit: ID
		# If present: new technical solution reference.
	updateTechnicalSolution: ID
		# If present: update assembly.
	updateAssembly: ID
		# If present: add realisation ports.
	addPorts: [ID]
		# If present: remove realisation ports.
	removePorts: [ID]
		# If present: add parts.
	addParts: [ID]
		# If present: remove parts.
	removeParts: [ID]
}

	# Update Performance input arguments.
input UpdatePerformanceInput {
		# Performance ID.
	performanceId: ID!
		# If present: new name.
	updateName: String
		# If present: new description.
	updateDescription: String
		# If present: new Value
	updateValue: ID
}

	# Update PortRealisation input arguments.
input UpdatePortRealisationInput {
		# Port realisation ID.
	portRealisationId: ID!
		# If present: new name.
	updateName: String
		# If present: new description.
	updateDescription: String
		# If present: new interface reference.
	updateInterface: String
		# If present: new realisation port reference.
	updatePort: String
		# If present: update assembly.
	updateAssembly: ID
		# If present: add parts.
	addParts: [ID]
		# If present: remove parts.
	removeParts: [ID]
}

	# Update RealisationModule input arguments.
input UpdateRealisationModuleInput {
		# RealisationModule ID.
	realisationModuleId: ID!
		# If present: new name.
	updateName: String
		# If present: new description.
	updateDescription: String
		# If present: add performances.
	addPerformances: [ID]
		# If present: remove performances.
	removePerformances: [ID]
		# If present: add ports.
	addPorts: [ID]
		# If present: remove ports.
	removePorts: [ID]
		# If present: update assembly.
	updateAssembly: ID
		# If present: add parts.
	addParts: [ID]
		# If present: remove parts.
	removeParts: [ID]
}

	# Update Realisation port input arguments.
input UpdateRealisationPortInput {
		# Realisation port ID.
	realisationPortId: ID!
		# If present: new name.
	updateName: String
		# If present: new description.
	updateDescription: String
		# If present: update assembly.
	updateAssembly: ID
		# If present: add parts.
	addParts: [ID]
		# If present: remove parts.
	removeParts: [ID]
}

	# Update Requirement input arguments.
input UpdateRequirementInput {
		# Requirement ID.
	requirementId: ID!
		# If present: new name.
	updateName: String
		# If present: new description.
	updateDescription: String
		# If present: new minimal Value
	updateMinValue: ID
		# If present: new maximal Value
	updateMaxValue: ID
}

	# Update SystemInterface input arguments.
input UpdateSystemInterfaceInput {
		# SystemInterface ID.
	systemInterfaceId: ID!
		# If present: new name.
	updateName: String
		# If present: new description.
	updateDescription: String
		# If present: update SystemSlot 0.
	updateSystemSlot0: ID
		# If present: update SystemSlot 1.
	updateSystemSlot1: ID
		# If present: update assembly.
	updateAssembly: ID
		# If present: add parts.
	addParts: [ID]
		# If present: remove parts.
	removeParts: [ID]
}

	# Update SystemSlot input arguments.
input UpdateSystemSlotInput {
		# SystemSlot ID.
	systemSlotId: ID!
		# If present: new name.
	updateName: String
		# If present: new description.
	updateDescription: String
		# If present: add functions.
	addFunctions: [ID]
		# If present: remove functions.
	removeFunctions: [ID]
		# If present: update assembly.
	updateAssembly: ID
		# If present: add parts.
	addParts: [ID]
		# If present: remove parts.
	removeParts: [ID]
}

	# Update Value input arguments.
input UpdateValueInput {
		# Value ID.
	valueId: ID!
		# If present: new name.
	updateName: String
		# If present: new description.
	updateDescription: String
		# If present: new unit.
	updateUnit: String
		# If present: new value.
	updateValue: Float
}

	# Update YacserModel input arguments.
input UpdateYacserModelInput {
		# Model ID.
	modelId: ID!
		# If present: new name.
	updateName: String
		# If present: new description.
	updateDescription: String
}

	# All mutations that are defined for this YACSER graphQL server
type Mutation {

		# Create a YACSER model.
	createModel(
			# Base URI of the model.
		modelId: ID!, 
			# Optional name of the model.
		name: String
			# Optional description of the model.
		description: String
	): YacserModel
	
		# Create a YACSER object.
	createObject(
			# Base URI of the model.
		modelId: ID!, 
			# Subtype of YACSER object.
		type: YacserObjectType!
			# Optional name of the object.
		name: String
			# Optional description of the object.
		description: String
	): YacserObject

		# Update Function object.
	updateFunction(
			# Input for Update Function.
		input: UpdateFunctionInput!
	): Function
	
		# Update Hamburger object.
	updateHamburger(
			# Input for Update Hamburger.
		input: UpdateHamburgerInput!
	): Hamburger
	
		# Update YacserModel object
	updateModel(
			# Input for Update YacserModel.
		input: UpdateYacserModelInput!
	): YacserModel
	
		# Update Performance object
	updatePerformance(
			# Input for Update Performance.
		input: UpdatePerformanceInput!
	): Performance

		# Update PortRealisation object.
	updatePortRealisation(
			# Input for Update PortRealisation.
		input: UpdatePortRealisationInput!
	): PortRealisation

		# Update RealisationModule object.
	updateRealisationModule(
			# Input for Update RealisationModule.
		input: UpdateRealisationModuleInput!
	): RealisationModule

		# Update RealisationPort object.
	updateRealisationPort(
			# Input for Update RealisationPort.
		input: UpdateRealisationPortInput!
	): RealisationPort

		# Update Requirement object.
	updateRequirement(
			# Input for Update Requirement.
		input: UpdateRequirementInput!
	): Requirement
	
			# Update SystemInterface object.
	updateSystemInterface(
			# Input for Update SystemInterface.
		input: UpdateSystemInterfaceInput!
	): SystemInterface
		
		# Update SystemSlot object.
	updateSystemSlot(
			# Input for Update SystemSlot.
		input: UpdateSystemSlotInput!
	): SystemSlot
	
		# Update Value object.
	updateValue(
			# Input for Update Value.
		input: UpdateValueInput!
	): Value
	
		# Save model
	saveModel(
		# Base URI of the model. 
	modelId: ID!,
		# File path
	filePath: String!
	): Boolean
	
		# Load model
	loadModel(
		# File path
	filePath: String!
	): YacserModel
	
}

schema {
  query: Query
  mutation: Mutation
}
